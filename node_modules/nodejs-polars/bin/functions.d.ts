import { Series } from "./series/series";
import { DataFrame } from "./dataframe";
declare type ConcatOptions = {
    rechunk?: boolean;
    how?: "vertical" | "horizontal";
};
/**
 * _Repeat a single value n times and collect into a Series._
 * @param value - Value to repeat.
 * @param n - Number of repeats
 * @param name - Optional name of the Series
 * @example
 *
 * ```
 *
 * > const s = pl.repeat("a", 5)
 * > s.toArray()
 * ["a", "a", "a", "a", "a"]
 *
 * ```
 */
export declare function repeat<V>(value: V, n: number, name?: string): Series;
/**
 * Aggregate all the Dataframes/Series in a List of DataFrames/Series to a single DataFrame/Series.
 * @param items DataFrames/Series/LazyFrames to concatenate.
 * @param options.rechunk rechunk the final DataFrame/Series.
 * @param options.how Only used if the items are DataFrames. *Defaults to 'vertical'*
 *     - Vertical: Applies multiple `vstack` operations.
 *     - Horizontal: Stacks Series horizontally and fills with nulls if the lengths don't match.
 *
 * @example
 * >>> const df1 = pl.DataFrame({"a": [1], "b": [3]})
 * >>> const df2 = pl.DataFrame({"a": [2], "b": [4]})
 * >>> pl.concat([df1, df2])
 * shape: (2, 2)
 * ┌─────┬─────┐
 * │ a   ┆ b   │
 * │ --- ┆ --- │
 * │ i64 ┆ i64 │
 * ╞═════╪═════╡
 * │ 1   ┆ 3   │
 * ├╌╌╌╌╌┼╌╌╌╌╌┤
 * │ 2   ┆ 4   │
 * └─────┴─────┘
 */
export declare function concat(items: Array<DataFrame>, options?: ConcatOptions): DataFrame;
export declare function concat<T>(items: Array<Series>, options?: {
    rechunk: boolean;
}): Series;
export {};
