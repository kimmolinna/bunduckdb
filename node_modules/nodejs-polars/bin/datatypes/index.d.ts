import { DataType } from "./datatype";
export { DataType };
export declare type TypedArray = Int8Array | Int16Array | Int32Array | BigInt64Array | Uint8Array | Uint16Array | Uint32Array | BigInt64Array | Float32Array | Float64Array;
export declare type Optional<T> = T | undefined | null;
export declare enum _DataType {
    Int8 = 0,
    Int16 = 1,
    Int32 = 2,
    Int64 = 3,
    UInt8 = 4,
    UInt16 = 5,
    UInt32 = 6,
    UInt64 = 7,
    Float32 = 8,
    Float64 = 9,
    Bool = 10,
    Utf8 = 11,
    List = 12,
    Date = 13,
    Datetime = 14,
    Time = 15,
    Object = 16,
    Categorical = 17,
    Struct = 18
}
export declare type JsDataFrame = any;
export declare type NullValues = string | Array<string> | Record<string, string>;
export declare type JoinBaseOptions = {
    how?: "left" | "inner" | "outer" | "semi" | "anti" | "cross";
    suffix?: string;
};
export declare type JoinOptions = {
    leftOn?: string | Array<string>;
    rightOn?: string | Array<string>;
    on?: string | Array<string>;
    how?: "left" | "inner" | "outer" | "semi" | "anti" | "cross";
    suffix?: string;
};
export declare const DTYPE_TO_FFINAME: {
    Int8: string;
    Int16: string;
    Int32: string;
    Int64: string;
    UInt8: string;
    UInt16: string;
    UInt32: string;
    UInt64: string;
    Float32: string;
    Float64: string;
    Bool: string;
    Utf8: string;
    List: string;
    Date: string;
    Datetime: string;
    Time: string;
    Object: string;
    Categorical: string;
    Struct: string;
};
export declare const polarsTypeToConstructor: (dtype: DataType) => CallableFunction;
