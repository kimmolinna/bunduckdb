"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.polarsTypeToConstructor = exports.DTYPE_TO_FFINAME = exports._DataType = exports.DataType = void 0;
const datatype_1 = require("./datatype");
Object.defineProperty(exports, "DataType", { enumerable: true, get: function () { return datatype_1.DataType; } });
const polars_internal_1 = __importDefault(require("../internals/polars_internal"));
var _DataType;
(function (_DataType) {
    _DataType[_DataType["Int8"] = 0] = "Int8";
    _DataType[_DataType["Int16"] = 1] = "Int16";
    _DataType[_DataType["Int32"] = 2] = "Int32";
    _DataType[_DataType["Int64"] = 3] = "Int64";
    _DataType[_DataType["UInt8"] = 4] = "UInt8";
    _DataType[_DataType["UInt16"] = 5] = "UInt16";
    _DataType[_DataType["UInt32"] = 6] = "UInt32";
    _DataType[_DataType["UInt64"] = 7] = "UInt64";
    _DataType[_DataType["Float32"] = 8] = "Float32";
    _DataType[_DataType["Float64"] = 9] = "Float64";
    _DataType[_DataType["Bool"] = 10] = "Bool";
    _DataType[_DataType["Utf8"] = 11] = "Utf8";
    _DataType[_DataType["List"] = 12] = "List";
    _DataType[_DataType["Date"] = 13] = "Date";
    _DataType[_DataType["Datetime"] = 14] = "Datetime";
    _DataType[_DataType["Time"] = 15] = "Time";
    _DataType[_DataType["Object"] = 16] = "Object";
    _DataType[_DataType["Categorical"] = 17] = "Categorical";
    _DataType[_DataType["Struct"] = 18] = "Struct";
})(_DataType = exports._DataType || (exports._DataType = {}));
exports.DTYPE_TO_FFINAME = {
    Int8: "I8",
    Int16: "I16",
    Int32: "I32",
    Int64: "I64",
    UInt8: "U8",
    UInt16: "U16",
    UInt32: "U32",
    UInt64: "U64",
    Float32: "F32",
    Float64: "F64",
    Bool: "Bool",
    Utf8: "Str",
    List: "List",
    Date: "Date",
    Datetime: "Datetime",
    Time: "Time",
    Object: "Object",
    Categorical: "Categorical",
    Struct: "Struct",
};
const POLARS_TYPE_TO_CONSTRUCTOR = {
    Float32(name, values, strict) {
        return polars_internal_1.default.JsSeries.newOptF64(name, values, strict);
    },
    Float64(name, values, strict) {
        return polars_internal_1.default.JsSeries.newOptF64(name, values, strict);
    },
    Int8(name, values, strict) {
        return polars_internal_1.default.JsSeries.newOptI32(name, values, strict);
    },
    Int16(name, values, strict) {
        return polars_internal_1.default.JsSeries.newOptI32(name, values, strict);
    },
    Int32(name, values, strict) {
        return polars_internal_1.default.JsSeries.newOptI32(name, values, strict);
    },
    Int64(name, values, strict) {
        return polars_internal_1.default.JsSeries.newOptI64(name, values, strict);
    },
    UInt8(name, values, strict) {
        return polars_internal_1.default.JsSeries.newOptU32(name, values, strict);
    },
    UInt16(name, values, strict) {
        return polars_internal_1.default.JsSeries.newOptU32(name, values, strict);
    },
    UInt32(name, values, strict) {
        return polars_internal_1.default.JsSeries.newOptU32(name, values, strict);
    },
    UInt64(name, values, strict) {
        return polars_internal_1.default.JsSeries.newOptU64(name, values, strict);
    },
    Date(name, values, strict) {
        return polars_internal_1.default.JsSeries.newOptI64(name, values, strict);
    },
    Datetime(name, values, strict) {
        return polars_internal_1.default.JsSeries.newOptI64(name, values, strict);
    },
    Bool(name, values, strict) {
        return polars_internal_1.default.JsSeries.newOptBool(name, values, strict);
    },
    Utf8(name, values, strict) {
        return polars_internal_1.default.JsSeries.newOptStr(name, values, strict);
    },
    Categorical(name, values, strict) {
        return polars_internal_1.default.JsSeries.newOptStr(name, values, strict);
    },
    List(name, values, _strict, dtype) {
        return polars_internal_1.default.JsSeries.newList(name, values, dtype);
    },
};
const polarsTypeToConstructor = (dtype) => {
    const constructor = POLARS_TYPE_TO_CONSTRUCTOR[dtype.variant];
    if (!constructor) {
        throw new Error(`Cannot construct Series for type ${dtype.variant}.`);
    }
    return constructor;
};
exports.polarsTypeToConstructor = polarsTypeToConstructor;
