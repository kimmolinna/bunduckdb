"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExprListFunctions = void 0;
const expr_1 = require("../expr");
const series_1 = require("../../series/series");
const polars_internal_1 = __importDefault(require("../../internals/polars_internal"));
const functions_1 = require("../functions");
const ExprListFunctions = (_expr) => {
    const wrap = (method, ...args) => {
        return (0, expr_1._Expr)(_expr[method](...args));
    };
    return {
        argMax() {
            return wrap("lstArgMax");
        },
        argMin() {
            return wrap("lstArgMin");
        },
        concat(other) {
            if (Array.isArray(other) &&
                !(expr_1.Expr.isExpr(other[0]) ||
                    series_1.Series.isSeries(other[0]) ||
                    typeof other[0] === "string")) {
                return this.concat(polars_internal_1.default.Series([other]));
            }
            let otherList;
            if (!Array.isArray(other)) {
                otherList = [other];
            }
            else {
                otherList = [...other];
            }
            otherList = [(0, expr_1._Expr)(_expr), ...otherList];
            return (0, functions_1.concatList)(otherList);
        },
        contains(item) {
            throw new Error("not yet implemented");
        },
        diff(n = 1, nullBehavior = "ignore") {
            return wrap("lstDiff", n, nullBehavior);
        },
        get(index) {
            if (expr_1.Expr.isExpr(index)) {
                return wrap("lstGet", index._expr);
            }
            else {
                return wrap("lstGet", polars_internal_1.default.lit(index));
            }
        },
        head(n = 5) {
            return this.slice(0, n);
        },
        tail(n = 5) {
            return this.slice(-n, n);
        },
        eval(expr, parallel) {
            return wrap("lstEval", expr, parallel);
        },
        first() {
            return this.get(0);
        },
        join(separator = ",") {
            return wrap("lstJoin", separator);
        },
        last() {
            return this.get(-1);
        },
        lengths() {
            return wrap("lstLengths");
        },
        max() {
            return wrap("lstMax");
        },
        mean() {
            return wrap("lstMean");
        },
        min() {
            return wrap("lstMin");
        },
        reverse() {
            return wrap("lstReverse");
        },
        shift(n) {
            return wrap("lstShift", n);
        },
        slice(offset, length) {
            return wrap("lstSlice", offset, length);
        },
        sort(reverse = false) {
            return typeof reverse === "boolean"
                ? wrap("lstSort", reverse)
                : wrap("lstSort", reverse.reverse);
        },
        sum() {
            return wrap("lstSum");
        },
        unique() {
            return wrap("lstUnique");
        },
    };
};
exports.ExprListFunctions = ExprListFunctions;
